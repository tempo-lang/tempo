// Code generated by tempo, DO NOT EDIT.

import { Env } from '../../../typescript/runtime.ts';

// Projection of interface `Combine`
export interface Combine_A {
  combine(env: Env): Promise<number>;
}
export interface Combine_B {
  combine(env: Env): Promise<number>;
}

// Projection of struct `Sum`
export interface Sum_X_attrs {
  x: number;
}
export class Sum_X implements Sum_X_attrs {
  x: number;
  
  constructor({ x }: Sum_X_attrs) {
    this.x = x;
  }
  
  async combine(env: Env): Promise<number> {
    return await env.send(this.x, "Y") + await env.recv<number>("Y");
  }
}

export interface Sum_Y_attrs {
  y: number;
}
export class Sum_Y implements Sum_Y_attrs {
  y: number;
  
  constructor({ y }: Sum_Y_attrs) {
    this.y = y;
  }
  
  async combine(env: Env): Promise<number> {
    return await env.recv<number>("X") + await env.send(this.y, "X");
  }
}


// Projection of choreography `main`
export async function main_L(env: Env) {
  let sum: Combine_A = new Sum_X({ x: 10 });
  let result: number = await sum.combine(env.subst("L", "A", "M", "B"));
}
export async function main_M(env: Env) {
  let sum: Combine_B = new Sum_Y({ y: 20 });
  let result: number = await sum.combine(env.subst("L", "A", "M", "B"));
}

