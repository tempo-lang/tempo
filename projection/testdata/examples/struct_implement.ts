// Code generated by tempo, DO NOT EDIT.

import { Env } from '../../../typescript/runtime.ts';

// Projection of interface `Combine`
export interface Combine_A {
  combine(env: Env): Promise<number>;
}
export interface Combine_B {
  combine(env: Env): Promise<number>;
}

// Projection of struct `Sum`
export type Sum_X = {
  x: number;
}
export type Sum_Y = {
  y: number;
}

// Implementation of struct `Sum`
function Sum_X_methods(self: Sum_X) {
  return {
    async combine(env: Env): Promise<number> {
      return await env.send(self.x, "Y") + await env.recv<number>("Y");
    },
  };
}
function Sum_Y_methods(self: Sum_Y) {
  return {
    async combine(env: Env): Promise<number> {
      return await env.recv<number>("X") + await env.send(self.y, "X");
    },
  };
}

// Projection of choreography `main`
export async function main_L(env: Env) {
  let sum: Combine_A = { x: 10 };
  let result: number = await sum.combine(env.subst("L", "A", "M", "B"));
}
export async function main_M(env: Env) {
  let sum: Combine_B = { y: 20 };
  let result: number = await sum.combine(env.subst("L", "A", "M", "B"));
}

