// Code generated by tempo, DO NOT EDIT.

import { Env } from '../../../typescript/runtime.ts';

// Projection of interface `Func`
export interface Func_A {
  call(env: Env, input: number): Promise<number>;
}

// Projection of struct `Mult`
export interface Mult_A_attrs {
  x: number;
}
export class Mult_A implements Mult_A_attrs, Func_A {
  x: number;
  
  constructor({ x }: Mult_A_attrs) {
    this.x = x;
  }
  
  async call(env: Env, input: number): Promise<number> {
    return input * this.x;
  }
}


// Projection of choreography `main`
export async function main_A(env: Env) {
  let f: Mult_A = new Mult_A({ x: 4 });
  let g: Func_A = await env.send(f, "B");
  let x: number = await g.call(env, 10);
}
export async function main_B(env: Env) {
  let g: Func_A = await env.recvClass<Mult_A, Mult_A_attrs>("A", Mult_A);
  let x: number = await g.call(env.subst("B", "A"), 10);
}

