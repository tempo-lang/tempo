// Code generated by tempo, DO NOT EDIT.

import { Env } from '../../../typescript/runtime.ts';

// Projection of interface `Printer`
export interface Printer {
  print(env: Env): Promise<string>;
}

// Projection of struct `Point`
export interface Point_attrs {
  x: number;
  y: number;
}
export class Point implements Point_attrs {
  x: number;
  y: number;
  
  constructor({ x, y }: Point_attrs) {
    this.x = x;
    this.y = y;
  }
  
  async print(env: Env): Promise<string> {
    return "Point";
  }
}


// Projection of choreography `foo`
export async function foo(env: Env): Promise<number> {
  let x: number = 10;
  let y: number[] = [1, 2, 3];
  let p: Point = env.copy(new Point({ x: x, y: y[0] }));
  let str: string = await p.print(env);
  return x;
}

// Projection of choreography `main`
export async function main_A(env: Env) {
  let x: number = await foo(env.subst("A", ""));
}
export async function main_B(env: Env) {
  let x: number = await foo(env.subst("B", ""));
}

