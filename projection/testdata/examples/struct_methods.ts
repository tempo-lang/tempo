// Code generated by tempo, DO NOT EDIT.

import { Env } from '../../../typescript/runtime.ts';

// Projection of struct `Pair`
export type Pair_A = {
  x: number;
}
export type Pair_B = {
  y: number;
}

// Implementation of struct `Pair`
function Pair_A_methods(self: Pair_A) {
  return {
    async swap(env: Env): Promise<Pair_B> {
      return { y: self.x };
    },
  };
}
function Pair_B_methods(self: Pair_B) {
  return {
    async swap(env: Env): Promise<Pair_A> {
      return { x: self.y };
    },
  };
}

// Projection of choreography `main`
export async function main_X(env: Env) {
  let pair: Pair_A = { x: 10 };
  let pair2: Pair_B = await Pair_A_methods(pair).swap(env.subst("X", "A", "Y", "B"));
}
export async function main_Y(env: Env) {
  let pair: Pair_B = { y: 20 };
  let pair2: Pair_A = await Pair_B_methods(pair).swap(env.subst("X", "A", "Y", "B"));
}

