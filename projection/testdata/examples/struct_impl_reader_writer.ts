// Code generated by tempo, DO NOT EDIT.

import { Env } from '../../../typescript/runtime.ts';

// Projection of interface `Reader`
export interface Reader_A {
  read(env: Env): Promise<number>;
}

// Projection of interface `Writer`
export interface Writer_A {
  write(env: Env, out: number): Promise<void>;
}

// Projection of struct `Buffer`
export interface Buffer_X_attrs {
  buf: number;
}
export class Buffer_X implements Buffer_X_attrs, Reader_A, Writer_A {
  buf: number;
  
  constructor({ buf }: Buffer_X_attrs) {
    this.buf = buf;
  }
  
  async read(env: Env): Promise<number> {
    return this.buf;
  }
  
  async write(env: Env, out: number) {
    this.buf = out;
  }
}


// Projection of choreography `main`
export async function main_A(env: Env) {
  let buffer: Buffer_X = new Buffer_X({ buf: 10 });
  let reader: Reader_A = env.copy(buffer);
  let writer: Writer_A = env.copy(buffer);
  await writer.write(env, 10);
  await reader.read(env);
}
export async function main_B(env: Env) {
}

