// Code generated by tempo, DO NOT EDIT.

import { Env } from '../../../typescript/runtime.ts';

// Projection of choreography foo
export async function foo_A(env: Env, value: number, fn: (env: Env, arg0: number) => Promise<void>) {
  await fn(env, value);
}
export async function foo_B(env: Env, fn: (env: Env) => Promise<number>): Promise<number> {
  return await fn(env);
}

// Projection of choreography send
export async function send_F(env: Env, value: number) {
  env.send(value, "G");
}
export async function send_G(env: Env): Promise<number> {
  return await env.recv("F");
}

// Projection of choreography bar
export async function bar_X(env: Env) {
  await foo_A(env.subst("X", "A", "Y", "B"), 10, async (env: Env, value: number) => {
    await send_F(env.subst("X", "F", "Y", "G"), value);
  });
}
export async function bar_Y(env: Env) {
  let result: number = await foo_B(env.subst("X", "A", "Y", "B"), async (env: Env): Promise<number> => {
    return await send_G(env.subst("X", "F", "Y", "G"));
  });
}

