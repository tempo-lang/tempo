// Code generated by tempo, DO NOT EDIT.
package choreography

import runtime "github.com/tempo-lang/tempo/runtime"

// Projection of interface `Combine`
type Combine_A interface {
	combine(env *runtime.Env) int
}
type Combine_B interface {
	combine(env *runtime.Env) int
}

// Projection of struct `Sum`
type Sum_X struct {
	x int `json:"x"`
}
type Sum_Y struct {
	y int `json:"y"`
}

// Implementation of struct `Sum`
func (self Sum_X) combine(env *runtime.Env) int {
	return runtime.GetAsync(runtime.Send(env, self.x, "Y")) + runtime.GetAsync(runtime.Recv[int](env, "Y"))
}
func (self Sum_Y) combine(env *runtime.Env) int {
	return runtime.GetAsync(runtime.Recv[int](env, "X")) + runtime.GetAsync(runtime.Send(env, self.y, "X"))
}

// Projection of choreography `main`
func main_L(env *runtime.Env) {
	var sum Combine_A = Sum_X{x: 10}
	_ = sum
	var result int = sum.combine(env.Subst("L", "A", "M", "B"))
	_ = result
}
func main_M(env *runtime.Env) {
	var sum Combine_B = Sum_Y{y: 20}
	_ = sum
	var result int = sum.combine(env.Subst("L", "A", "M", "B"))
	_ = result
}
