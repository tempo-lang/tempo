// Code generated by tempo, DO NOT EDIT.
package remote_procedure_call

import runtime "github.com/tempo-lang/tempo/runtime"

// Projection of interface `RPC`
type RPC_A interface {
	Call(env *runtime.Env, input int) *runtime.Async[int]
}
type RPC_B interface {
	Call(env *runtime.Env)
}

// Projection of struct `RemoteCall`
type RemoteCall_A struct{}
type RemoteCall_B struct {
	Fn func(int) int `json:"Fn"`
}

// Implementation of struct `RemoteCall`
func (self RemoteCall_A) Call(env *runtime.Env, input int) *runtime.Async[int] {
	_ = runtime.GetAsync(runtime.Send(env, input, "B"))
	return runtime.Recv[int](env, "B")
}
func (self RemoteCall_B) Call(env *runtime.Env) {
	var output int = self.Fn(runtime.GetAsync(runtime.Recv[int](env, "A")))
	_ = output
	_ = runtime.Send(env, output, "A")
}

// Projection of choreography `Start`
func Start_A(env *runtime.Env) {
	var rpc RPC_A = RemoteCall_A{}
	_ = rpc
	var result int = runtime.GetAsync(rpc.Call(env, 10))
	_ = result
}
func Start_B(env *runtime.Env) {
	var timesTwo func(int) int = func(input int) int {
		return input * 2
	}
	_ = timesTwo
	var rpc RPC_B = runtime.Copy(RemoteCall_B{Fn: timesTwo})
	_ = rpc
	rpc.Call(env)
}
