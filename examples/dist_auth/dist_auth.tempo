struct@A Credentials {
  Username: String@A;
  Password: String@B;
}

struct@(C,S) AuthResult {
  Success: Bool@[C,S];
  Token: String@[C,S];
}

interface@A ClientRegistry {
  func@A GetSalt(username: String@A) String@A;
  func@A Check(hash: String@A) Bool@A;
}

interface@A TokenGenerator {
  func@A GenerateToken() String@A;
}

interface@A Hasher {
  func@A CalcHash(salt: String@A, password: String@A) String@A;
}

func@(Client, Service, IP) Authenticate(
  credentials: Credentials@Client,
  registry: ClientRegistry@IP,
  tokenGen: TokenGenerator@IP,
  hasher: Hasher@Client
) AuthResult@(Client, Service) {
  let username: async String@IP = Client -> IP credentials.Username;
  let salt: async String@Client = IP -> Client registry.GetSalt(await username);

  let hash: async String@IP = Client->IP hasher.CalcHash(await salt, credentials.Password);
  let valid = IP -> [Client, Service] registry.Check(await hash);

  if await valid {
    let token: async String@[Client, Service] = IP -> [Client, Service] tokenGen.GenerateToken();
    return AuthResult@(Client, Service) { Success: true, Token: await token };
  } else {
    return AuthResult@(Client, Service) { Success: false, Token: "" };
  }
}
