// Code generated by tempo, DO NOT EDIT.
package dist_auth

import runtime "github.com/tempo-lang/tempo/runtime"

// Projection of interface `ClientRegistry`
type ClientRegistry interface {
	GetSalt(env *runtime.Env, username string) string
	Check(env *runtime.Env, hash string) bool
}

// Projection of interface `TokenGenerator`
type TokenGenerator interface {
	GenerateToken(env *runtime.Env) string
}

// Projection of interface `Hasher`
type Hasher interface {
	CalcHash(env *runtime.Env, salt string, password string) string
}

// Projection of struct `Credentials`
type Credentials struct {
	Username string `json:"Username"`
	Password string `json:"Password"`
}

// Projection of struct `AuthResult`
type AuthResult_C struct {
	Success bool   `json:"Success"`
	Token   string `json:"Token"`
}
type AuthResult_S struct {
	Success bool   `json:"Success"`
	Token   string `json:"Token"`
}

// Projection of choreography `Authenticate`
func Authenticate_Client(env *runtime.Env, credentials Credentials, hasher Hasher) AuthResult_C {
	_ = runtime.Send(env, credentials.Username, "IP")
	var salt *runtime.Async[string] = runtime.Recv[string](env, "IP")
	_ = salt
	_ = runtime.Send(env, hasher.CalcHash(env.Subst("Client", ""), runtime.GetAsync(salt), credentials.Password), "IP")
	var valid *runtime.Async[bool] = runtime.Recv[bool](env, "IP")
	_ = valid
	if runtime.GetAsync(valid) {
		var token *runtime.Async[string] = runtime.Recv[string](env, "IP")
		_ = token
		return AuthResult_C{
			Success: true,
			Token:   runtime.GetAsync(token),
		}
	} else {
		return AuthResult_C{
			Success: false,
			Token:   "",
		}
	}
}
func Authenticate_Service(env *runtime.Env) AuthResult_S {
	var valid *runtime.Async[bool] = runtime.Recv[bool](env, "IP")
	_ = valid
	if runtime.GetAsync(valid) {
		var token *runtime.Async[string] = runtime.Recv[string](env, "IP")
		_ = token
		return AuthResult_S{
			Success: true,
			Token:   runtime.GetAsync(token),
		}
	} else {
		return AuthResult_S{
			Success: false,
			Token:   "",
		}
	}
}
func Authenticate_IP(env *runtime.Env, registry ClientRegistry, tokenGen TokenGenerator) {
	var username *runtime.Async[string] = runtime.Recv[string](env, "Client")
	_ = username
	_ = runtime.Send(env, registry.GetSalt(env.Subst("IP", ""), runtime.GetAsync(username)), "Client")
	var hash *runtime.Async[string] = runtime.Recv[string](env, "Client")
	_ = hash
	var valid *runtime.Async[bool] = runtime.Send(env, registry.Check(env.Subst("IP", ""), runtime.GetAsync(hash)), "Client", "Service")
	_ = valid
	if runtime.GetAsync(valid) {
		_ = runtime.Send(env, tokenGen.GenerateToken(env.Subst("IP", "")), "Client", "Service")
	}
}
