// Code generated by tempo, DO NOT EDIT.
package diffie_hellman;

import java.util.concurrent.Future;
import tempo.runtime.Env;

public final class Choreography {
  private Choreography() {}
  // Projection of interface `Math`
  public interface Math_A {
    public Integer Exp(Env env, Integer base, Integer exp) throws Exception;
  }
  
  // Projection of struct `Secret`
  public static final class Secret_A implements Cloneable {
    public Integer A;
    
    public Secret_A(Integer A) {
      this.A = A;
    }
    
    public Secret_A clone() {
      return new Secret_A(A);
    }
  }
  public static final class Secret_B implements Cloneable {
    public Integer B;
    
    public Secret_B(Integer B) {
      this.B = B;
    }
    
    public Secret_B clone() {
      return new Secret_B(B);
    }
  }
  
  // Projection of choreography `DiffieHellman`
  public static Secret_A DiffieHellman_A(Env env, Math_A mathA) throws Exception {
    Integer p = 23;
    Integer g = 5;
    Integer a = 4;
    env.send(mathA.Exp(env, g, a) % p, "B");
    Future<Integer> B = env.<Integer>recv("B");
    Integer sA = mathA.Exp(env, B.get(), a) % p;
    return new Secret_A(sA);
  }
  public static Secret_B DiffieHellman_B(Env env, Math_A mathB) throws Exception {
    Integer p = 23;
    Integer g = 5;
    Integer b = 3;
    Future<Integer> A = env.<Integer>recv("A");
    env.send(mathB.Exp(env.subst("B", "A"), g, b) % p, "A");
    Integer sB = mathB.Exp(env.subst("B", "A"), A.get(), b) % p;
    return new Secret_B(sB);
  }
}
