// Code generated by tempo, DO NOT EDIT.
package diffie_hellman

import runtime "github.com/tempo-lang/tempo/runtime"

// Projection of interface Math
type Math_A interface {
	Exp(env *runtime.Env, base int, exp int) int
}

// Projection of struct Secret
type Secret_A struct {
	A int `json:"A"`
}
type Secret_B struct {
	B int `json:"B"`
}

// Projection of choreography DiffieHellman
func DiffieHellman_A(env *runtime.Env, mathA Math_A) Secret_A {
	var p int = runtime.Copy(23)
	_ = p
	var g int = runtime.Copy(5)
	_ = g
	var a int = runtime.Copy(4)
	_ = a
	var tmp0 *runtime.Async[int] = runtime.FixedAsync(mathA.Exp(env.Subst("A", "A"), runtime.Copy(g), runtime.Copy(a)) % p)
	runtime.Send(env, runtime.GetAsync(tmp0), "B")
	var B *runtime.Async[int] = runtime.Copy(runtime.Recv[int](env, "B"))
	_ = B
	var sA int = runtime.Copy(mathA.Exp(env.Subst("A", "A"), runtime.Copy(runtime.GetAsync(B)), runtime.Copy(a)) % p)
	_ = sA
	return Secret_A{A: sA}
}
func DiffieHellman_B(env *runtime.Env, mathB Math_A) Secret_B {
	var p int = runtime.Copy(23)
	_ = p
	var g int = runtime.Copy(5)
	_ = g
	var b int = runtime.Copy(3)
	_ = b
	var A *runtime.Async[int] = runtime.Copy(runtime.Recv[int](env, "A"))
	_ = A
	var tmp1 *runtime.Async[int] = runtime.FixedAsync(mathB.Exp(env.Subst("B", "A"), runtime.Copy(g), runtime.Copy(b)) % p)
	runtime.Send(env, runtime.GetAsync(tmp1), "A")
	var sB int = runtime.Copy(mathB.Exp(env.Subst("B", "A"), runtime.Copy(runtime.GetAsync(A)), runtime.Copy(b)) % p)
	_ = sB
	return Secret_B{B: sB}
}
