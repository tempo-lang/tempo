// Code generated by tempo, DO NOT EDIT.
package diffie_hellman

import runtime "github.com/tempo-lang/tempo/runtime"

// Projection of interface `Math`
type Math interface {
	Exp(env *runtime.Env, base int, exp int) int
}

// Projection of struct `Secret`
type Secret_A struct {
	A int `json:"A"`
}
type Secret_B struct {
	B int `json:"B"`
}

// Projection of choreography `DiffieHellman`
func DiffieHellman_A(env *runtime.Env, mathA Math) Secret_A {
	var p int = 23
	_ = p
	var g int = 5
	_ = g
	var a int = 4
	_ = a
	_ = runtime.Send(env, mathA.Exp(env.Subst("A", ""), g, a)%p, "B")
	var B *runtime.Async[int] = runtime.Recv[int](env, "B")
	_ = B
	var sA int = mathA.Exp(env.Subst("A", ""), runtime.GetAsync(B), a) % p
	_ = sA
	return Secret_A{A: sA}
}
func DiffieHellman_B(env *runtime.Env, mathB Math) Secret_B {
	var p int = 23
	_ = p
	var g int = 5
	_ = g
	var b int = 3
	_ = b
	var A *runtime.Async[int] = runtime.Recv[int](env, "A")
	_ = A
	_ = runtime.Send(env, mathB.Exp(env.Subst("B", ""), g, b)%p, "A")
	var sB int = mathB.Exp(env.Subst("B", ""), runtime.GetAsync(A), b) % p
	_ = sB
	return Secret_B{B: sB}
}
