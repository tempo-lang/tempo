// The parser package contains the Tempo parser.
// Most of this package is generated by the Antlr parser generator.
package parser

import (
	"fmt"

	"github.com/antlr4-go/antlr/v4"
)

// Parse takes a character stream and parses it into an abstract syntax tree.
//
// If the source input contains any syntax errors these will be returned
// along with an erroronous AST.
func Parse(input antlr.CharStream) (sourceFile ISourceFileContext, errors []*SyntaxError) {
	// input, _ := antlr.NewFileStream(os.Args[1])
	errorListener := errorListener{}

	// lexer
	lexer := NewTempoLexer(input)
	lexer.AddErrorListener(&errorListener)

	// parser
	stream := antlr.NewCommonTokenStream(lexer, 0)
	p := NewTempoParser(stream)
	// p.AddErrorListener(antlr.NewDiagnosticErrorListener(true))

	p.AddErrorListener(&errorListener)

	// parse program
	sourceFile = p.SourceFile()

	if len(errorListener.Errors) > 0 {
		errors = errorListener.Errors
	}

	return
}

// RoleTypeAllIdents extracts all `identifiers` from a `role type`.
func RoleTypeAllIdents(ctx IRoleTypeContext) []IIdentContext {
	// parser error
	if ctx == nil {
		return nil
	}

	switch ctx := ctx.(type) {
	case *RoleTypeNormalContext:
		return ctx.AllIdent()
	case *RoleTypeSharedContext:
		return ctx.AllIdent()
	case *RoleTypeContext:
		// parser error
		return nil
	}

	panic(fmt.Sprintf("unknown role type: %T", ctx))
}

// SyntaxError contains details about a syntax error in the source code.
type SyntaxError struct {
	line   int
	column int
	msg    string
}

func newSyntaxError(line int, column int, msg string) *SyntaxError {
	return &SyntaxError{
		line:   line,
		column: column,
		msg:    msg,
	}
}

// Line returns the line number in the original source code of where the syntax error happened.
func (e *SyntaxError) Line() int {
	return e.line
}

// Column returns the column number in the line of the original source code of where the syntax error happened.
func (e *SyntaxError) Column() int {
	return e.column
}

// Message returns the raw syntax error message
func (e *SyntaxError) Message() string {
	return e.msg
}

// Error returns a formatted error message of the syntax error.
func (e *SyntaxError) Error() string {
	return fmt.Sprintf("syntax error: %d:%d: %s", e.line, e.column, e.msg)
}

type errorListener struct {
	Errors []*SyntaxError
}

// ReportAmbiguity implements antlr.ErrorListener.
func (t *errorListener) ReportAmbiguity(recognizer antlr.Parser, dfa *antlr.DFA, startIndex int, stopIndex int, exact bool, ambigAlts *antlr.BitSet, configs *antlr.ATNConfigSet) {
	// t.Errors = append(t.Errors, errors.New("ambiguity error"))
	println("ambiguity error")
}

// ReportAttemptingFullContext implements antlr.ErrorListener.
func (t *errorListener) ReportAttemptingFullContext(recognizer antlr.Parser, dfa *antlr.DFA, startIndex int, stopIndex int, conflictingAlts *antlr.BitSet, configs *antlr.ATNConfigSet) {
	// t.Errors = append(t.Errors, errors.New("attempting full context error"))
	println("context error")
}

// ReportContextSensitivity implements antlr.ErrorListener.
func (t *errorListener) ReportContextSensitivity(recognizer antlr.Parser, dfa *antlr.DFA, startIndex int, stopIndex int, prediction int, configs *antlr.ATNConfigSet) {
	// t.Errors = append(t.Errors, errors.New("context sensitivity error"))
	println("sensitivity error")
}

// SyntaxError implements antlr.ErrorListener.
func (t *errorListener) SyntaxError(recognizer antlr.Recognizer, offendingSymbol interface{}, line int, column int, msg string, e antlr.RecognitionException) {
	t.Errors = append(
		t.Errors,
		newSyntaxError(line, column, msg),
	)
}
