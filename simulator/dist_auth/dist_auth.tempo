struct@A Credentials {
  Username: Int@A,
  Password: Int@A
}

struct@(C,S) AuthResult {
  Success: Bool@[C,S],
  Token: Int@[C,S]
}

interface@A ClientRegistry {
  func@A GetSalt(username: Int@A) Int@A;
  func@A Check(hash: Int@A) Bool@A;
}

interface@A TokenGenerator {
  func@A GenerateToken() Int@A;
}

func@A calcHash(salt: Int@A, password: Int@A) Int@A {
  return password + salt;
}

func@(Client, Service, IP) Authenticate(
  credentials: Credentials@Client,
  registry: ClientRegistry@IP,
  tokenGen: TokenGenerator@IP
) AuthResult@(Client, Service) {
  let username: async Int@IP = Client -> IP credentials.Username;
  let salt: async Int@Client = IP -> Client registry.GetSalt(await username)@(IP);

  let hash: async Int@IP = Client -> IP calcHash(await salt, credentials.Password)@Client;
  let valid: async Bool@[Client, Service, IP] = IP -> [Client, Service] registry.Check(await hash)@(IP);

  if await valid {
    let token: async Int@[Client, Service] = IP -> [Client, Service] tokenGen.GenerateToken()@(IP);
    return AuthResult@(Client, Service) { Success: true, Token: await token };
  } else {
    return AuthResult@(Client, Service) { Success: false, Token: 0 };
  }
}
