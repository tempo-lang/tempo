// Code generated by tempo, DO NOT EDIT.
package diffie_hellman

import runtime "tempo/runtime"

// Projection of interface Math
type Math_A interface {
	Exp(env *runtime.Env, base int, exp int) int
}

// Projection of struct Secret
type Secret_A struct {
	A int `json:"A"`
}
type Secret_B struct {
	B int `json:"B"`
}

// Projection of choreography DiffieHellman
func DiffieHellman_A(env *runtime.Env, mathA Math_A) Secret_A {
	var p int = 23
	_ = p
	var g int = 5
	_ = g
	var a int = 4
	_ = a
	var tmp0 *runtime.Async = runtime.FixedAsync(mathA.Exp(env.Subst("A", "A"), g, a) % p)
	_ = tmp0
	env.Send(tmp0.Get().(int), "B")
	var B *runtime.Async = env.Recv("B")
	_ = B
	var sA int = mathA.Exp(env.Subst("A", "A"), B.Get().(int), a) % p
	_ = sA
	return Secret_A{A: sA}
}
func DiffieHellman_B(env *runtime.Env, mathB Math_A) Secret_B {
	var p int = 23
	_ = p
	var g int = 5
	_ = g
	var b int = 3
	_ = b
	var A *runtime.Async = env.Recv("A")
	_ = A
	var tmp1 *runtime.Async = runtime.FixedAsync(mathB.Exp(env.Subst("B", "A"), g, b) % p)
	_ = tmp1
	env.Send(tmp1.Get().(int), "A")
	var sB int = mathB.Exp(env.Subst("B", "A"), A.Get().(int), b) % p
	_ = sB
	return Secret_B{B: sB}
}
