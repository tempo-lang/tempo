interface@A Math {
  func@A Exp(base: Int@A, exp: Int@A) Int@A;
}

struct@(A,B) Secret {
  A: Int@A,
  B: Int@B
}

func@(A,B) DiffieHellman(mathA: Math@A, mathB: Math@B) Secret@(A,B) {
  let p: Int@[A,B] = 23;
  let g: Int@[A,B] = 5;

  let a: Int@A = 4;
  let b: Int@B = 3;

  let A: async Int@B = A->B mathA.Exp(g, a) % p;
  let B: async Int@A = B->A mathB.Exp(g, b) % p;

  let sA: Int@A = mathA.Exp(await B, a) % p;
  let sB: Int@B = mathB.Exp(await A, b) % p;

  let x: Secret@(A,B) = Secret@(A,B) { A: 10, B: 10 };

  return Secret@(A,B) {
    A: sA, B: sB
  };
}
